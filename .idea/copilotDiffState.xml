<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/components/gallery/carousel/CarouselImage.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/gallery/carousel/CarouselImage.tsx" />
              <option name="originalContent" value="import { forwardRef, useState } from &quot;react&quot;;&#10;import Image from &quot;next/image&quot;;&#10;&#10;interface CarouselImageProps {&#10;  src: string;&#10;  alt: string;&#10;  onLoad: () =&gt; void;&#10;  priority?: boolean;&#10;  blurDataURL?: string;&#10;}&#10;&#10;export const CarouselImage = forwardRef&lt;HTMLImageElement, CarouselImageProps&gt;(&#10;  ({ src, alt, onLoad, priority = false, blurDataURL }, ref) =&gt; {&#10;    const [imageLoaded, setImageLoaded] = useState(false);&#10;&#10;    const handleImageLoad = () =&gt; {&#10;      setImageLoaded(true);&#10;      onLoad();&#10;    };&#10;&#10;    return (&#10;      &lt;div className=&quot;relative rounded-3xl overflow-hidden shadow-intense bg-black/15 transform-gpu&quot;&gt;&#10;        {/* Blur placeholder that shows immediately */}&#10;        {blurDataURL &amp;&amp; !imageLoaded &amp;&amp; (&#10;          &lt;div&#10;            className=&quot;absolute inset-0 w-full h-full bg-cover bg-center transform-gpu motion-opacity-in&quot;&#10;            style={{&#10;              backgroundImage: `url(${blurDataURL})`,&#10;              filter: &quot;blur(20px)&quot;,&#10;              transform: &quot;scale(1.1)&quot;, // Slightly scale to hide blur edges&#10;            }}&#10;          /&gt;&#10;        )}&#10;&#10;        &lt;Image&#10;          ref={ref}&#10;          width={800}&#10;          height={600}&#10;          src={src}&#10;          alt={alt}&#10;          priority={priority}&#10;          quality={90}&#10;          sizes=&quot;(max-width: 768px) 100vw, (max-width: 1200px) 80vw, 70vw&quot;&#10;          className={`w-full h-auto max-h-[70vh] aspect-[16/10] object-cover transform-gpu transition-opacity duration-300 ${&#10;            imageLoaded ? &quot;motion-opacity-in&quot; : &quot;opacity-0&quot;&#10;          }`}&#10;          onLoad={handleImageLoad}&#10;          style={{ willChange: &quot;opacity&quot; }}&#10;        /&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  },&#10;);&#10;&#10;CarouselImage.displayName = &quot;CarouselImage&quot;;&#10;" />
              <option name="updatedContent" value="import { forwardRef, useState } from &quot;react&quot;;&#10;import Image from &quot;next/image&quot;;&#10;&#10;interface CarouselImageProps {&#10;  src: string;&#10;  alt: string;&#10;  onLoad: () =&gt; void;&#10;  priority?: boolean;&#10;  blurDataURL?: string;&#10;}&#10;&#10;export const CarouselImage = forwardRef&lt;HTMLImageElement, CarouselImageProps&gt;(&#10;  ({ src, alt, onLoad, priority = false, blurDataURL }, ref) =&gt; {&#10;    const [imageLoaded, setImageLoaded] = useState(false);&#10;&#10;    const handleImageLoad = () =&gt; {&#10;      setImageLoaded(true);&#10;      onLoad();&#10;    };&#10;&#10;    return (&#10;      &lt;div className=&quot;relative rounded-3xl overflow-hidden shadow-intense bg-black/15 transform-gpu&quot;&gt;&#10;        {/* Blur placeholder - always visible initially, fades out when image loads */}&#10;        {blurDataURL &amp;&amp; (&#10;          &lt;div&#10;            className={`absolute inset-0 w-full h-full bg-cover bg-center transform-gpu transition-opacity duration-500 ease-out ${&#10;              imageLoaded ? &quot;opacity-0&quot; : &quot;motion-opacity-in&quot;&#10;            }`}&#10;            style={{&#10;              backgroundImage: `url(${blurDataURL})`,&#10;              filter: &quot;blur(20px)&quot;,&#10;              transform: &quot;scale(1.1)&quot;, // Slightly scale to hide blur edges&#10;              willChange: &quot;opacity&quot;,&#10;            }}&#10;          /&gt;&#10;        )}&#10;&#10;        &lt;Image&#10;          ref={ref}&#10;          width={800}&#10;          height={600}&#10;          src={src}&#10;          alt={alt}&#10;          priority={priority}&#10;          quality={90}&#10;          sizes=&quot;(max-width: 768px) 100vw, (max-width: 1200px) 80vw, 70vw&quot;&#10;          className={`w-full h-auto max-h-[70vh] aspect-[16/10] object-cover transform-gpu transition-opacity duration-500 ease-out ${&#10;            imageLoaded ? &quot;opacity-100&quot; : &quot;opacity-0&quot;&#10;          }`}&#10;          onLoad={handleImageLoad}&#10;          style={{ willChange: &quot;opacity&quot; }}&#10;        /&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  },&#10;);&#10;&#10;CarouselImage.displayName = &quot;CarouselImage&quot;;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/gallery/carousel/CarouselNavigation.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/gallery/carousel/CarouselNavigation.tsx" />
              <option name="updatedContent" value="import { ChevronLeft, ChevronRight } from &quot;lucide-react&quot;;&#10;import { GlassButton } from &quot;@/components/ui/glass-button&quot;;&#10;&#10;interface CarouselNavigationProps {&#10;  onPrevious: () =&gt; void;&#10;  onNext: () =&gt; void;&#10;  isTransitioning: boolean;&#10;}&#10;&#10;export function CarouselNavigation({&#10;  onPrevious,&#10;  onNext,&#10;  isTransitioning,&#10;}: CarouselNavigationProps) {&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;absolute left-4 top-1/2 -translate-y-1/2 z-10&quot;&gt;&#10;        &lt;GlassButton&#10;          variant=&quot;icon&quot;&#10;          onClick={onPrevious}&#10;          className=&quot;hover:scale-105 transition-transform duration-200&quot;&#10;          disabled={isTransitioning}&#10;        &gt;&#10;          &lt;ChevronLeft size={24} /&gt;&#10;        &lt;/GlassButton&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;absolute right-4 top-1/2 -translate-y-1/2 z-10&quot;&gt;&#10;        &lt;GlassButton&#10;          variant=&quot;icon&quot;&#10;          onClick={onNext}&#10;          className=&quot;hover:scale-105 transition-transform duration-200&quot;&#10;          disabled={isTransitioning}&#10;        &gt;&#10;          &lt;ChevronRight size={24} /&gt;&#10;        &lt;/GlassButton&gt;&#10;      &lt;/div&gt;&#10;    &lt;/&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/gallery/carousel/CarouselTopBar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/gallery/carousel/CarouselTopBar.tsx" />
              <option name="updatedContent" value="import { Grid3x3 } from &quot;lucide-react&quot;;&#10;import { GlassButton } from &quot;@/components/ui/glass-button&quot;;&#10;&#10;interface CarouselTopBarProps {&#10;  currentIndex: number;&#10;  totalImages: number;&#10;  onViewModeChange: () =&gt; void;&#10;}&#10;&#10;export function CarouselTopBar({&#10;  currentIndex,&#10;  totalImages,&#10;  onViewModeChange,&#10;}: CarouselTopBarProps) {&#10;  return (&#10;    &lt;div className=&quot;absolute top-6 left-6 right-6 z-20 flex justify-between items-center&quot;&gt;&#10;      &lt;div className=&quot;text-gallery-text/80 text-sm font-medium&quot;&gt;&#10;        {currentIndex + 1} of {totalImages}&#10;      &lt;/div&gt;&#10;      &lt;GlassButton&#10;        variant=&quot;icon&quot;&#10;        onClick={onViewModeChange}&#10;        className=&quot;hover:scale-105 transition-transform duration-200&quot;&#10;      &gt;&#10;        &lt;Grid3x3 size={20} /&gt;&#10;      &lt;/GlassButton&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/gallery/carousel/ImageIndicators.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/gallery/carousel/ImageIndicators.tsx" />
              <option name="updatedContent" value="interface ImageIndicatorsProps {&#10;  totalImages: number;&#10;  currentIndex: number;&#10;  onIndexChange: (index: number) =&gt; void;&#10;}&#10;&#10;export function ImageIndicators({&#10;  totalImages,&#10;  currentIndex,&#10;  onIndexChange,&#10;}: ImageIndicatorsProps) {&#10;  return (&#10;    &lt;div className=&quot;absolute bottom-8 left-1/2 -translate-x-1/2 flex gap-2&quot;&gt;&#10;      {Array.from({ length: totalImages }, (_, index) =&gt; (&#10;        &lt;button&#10;          key={index}&#10;          onClick={() =&gt; onIndexChange(index)}&#10;          className={`w-2 h-2 rounded-full transition-all duration-200 hover:scale-125 transform-gpu ${&#10;            index === currentIndex&#10;              ? &quot;bg-gallery-text scale-125&quot;&#10;              : &quot;bg-gallery-text/40 hover:bg-gallery-text/60&quot;&#10;          }`}&#10;          style={{ willChange: &quot;transform&quot; }}&#10;        /&gt;&#10;      ))}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/gallery/carousel/useCarouselKeyboard.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/gallery/carousel/useCarouselKeyboard.ts" />
              <option name="updatedContent" value="import { useEffect } from &quot;react&quot;;&#10;&#10;interface UseCarouselKeyboardProps {&#10;  onPrevious: () =&gt; void;&#10;  onNext: () =&gt; void;&#10;  onViewModeChange: () =&gt; void;&#10;  currentIndex: number;&#10;}&#10;&#10;export function useCarouselKeyboard({&#10;  onPrevious,&#10;  onNext,&#10;  onViewModeChange,&#10;  currentIndex,&#10;}: UseCarouselKeyboardProps) {&#10;  useEffect(() =&gt; {&#10;    const handleKeyDown = (e: KeyboardEvent) =&gt; {&#10;      if (e.key === &quot;ArrowLeft&quot;) {&#10;        onPrevious();&#10;      }&#10;      if (e.key === &quot;ArrowRight&quot;) {&#10;        onNext();&#10;      }&#10;      if (e.key === &quot;Escape&quot;) {&#10;        onViewModeChange();&#10;      }&#10;    };&#10;&#10;    document.addEventListener(&quot;keydown&quot;, handleKeyDown);&#10;    return () =&gt; document.removeEventListener(&quot;keydown&quot;, handleKeyDown);&#10;  }, [currentIndex, onPrevious, onNext, onViewModeChange]);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>