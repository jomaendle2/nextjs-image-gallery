<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/globals.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/globals.css" />
              <option name="originalContent" value="@import &quot;tailwindcss&quot;;&#10;@import &quot;tw-animate-css&quot;;&#10;&#10;@plugin &quot;tailwindcss-motion&quot;;&#10;&#10;@custom-variant dark (&amp;:is(.dark *));&#10;&#10;@theme inline {&#10;    --color-background: var(--background);&#10;    --color-foreground: var(--foreground);&#10;    --color-sidebar-ring: var(--sidebar-ring);&#10;    --color-sidebar-border: var(--sidebar-border);&#10;    --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);&#10;    --color-sidebar-accent: var(--sidebar-accent);&#10;    --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);&#10;    --color-sidebar-primary: var(--sidebar-primary);&#10;    --color-sidebar-foreground: var(--sidebar-foreground);&#10;    --color-ring: var(--ring);&#10;    --color-input: var(--input);&#10;    --color-border: var(--border);&#10;    --color-destructive: var(--destructive);&#10;    --color-accent-foreground: var(--accent-foreground);&#10;    --color-accent: var(--accent);&#10;    --color-muted-foreground: var(--muted-foreground);&#10;    --color-muted: var(--muted);&#10;    --color-secondary-foreground: var(--secondary-foreground);&#10;    --color-secondary: var(--secondary);&#10;    --color-primary-foreground: var(--primary-foreground);&#10;    --color-primary: var(--primary);&#10;    --color-popover-foreground: var(--popover-foreground);&#10;    --color-popover: var(--popover);&#10;    --color-card-foreground: var(--card-foreground);&#10;    --color-card: var(--card);&#10;    --radius-sm: calc(var(--radius) - 4px);&#10;    --radius-md: calc(var(--radius) - 2px);&#10;    --radius-lg: var(--radius);&#10;    --radius-xl: calc(var(--radius) + 4px);&#10;&#10;    --color-gallery-bg: hsl(var(--gallery-bg));&#10;    --color-gallery-text: hsl(var(--gallery-text));&#10;    --color-gallery-muted: hsl(var(--gallery-muted));&#10;    --color-glass-bg: hsl(var(--glass-bg));&#10;    --color-glass-border: hsl(var(--glass-border));&#10;    --color-button-glass: hsl(var(--button-glass));&#10;    --color-button-glass-hover: hsl(var(--button-glass-hover));&#10;}&#10;&#10;:root {&#10;    --radius: 0.625rem;&#10;    --background: 0 0% 100%;&#10;    --foreground: 222.2 84% 4.9%;&#10;&#10;    --card: 0 0% 100%;&#10;    --card-foreground: 222.2 84% 4.9%;&#10;&#10;    --popover: 0 0% 100%;&#10;    --popover-foreground: 222.2 84% 4.9%;&#10;&#10;    --primary: 222.2 47.4% 11.2%;&#10;    --primary-foreground: 210 40% 98%;&#10;&#10;    --secondary: 210 40% 96.1%;&#10;    --secondary-foreground: 222.2 47.4% 11.2%;&#10;&#10;    --muted: 210 40% 96.1%;&#10;    --muted-foreground: 215.4 16.3% 46.9%;&#10;&#10;    --accent: 210 40% 96.1%;&#10;    --accent-foreground: 222.2 47.4% 11.2%;&#10;&#10;    --destructive: 0 84.2% 60.2%;&#10;    --destructive-foreground: 210 40% 98%;&#10;&#10;    --border: 214.3 31.8% 91.4%;&#10;    --input: 214.3 31.8% 91.4%;&#10;    --ring: 222.2 84% 4.9%;&#10;&#10;    /* Gallery-specific design tokens */&#10;    --gallery-bg: 0 0% 5%;&#10;    --gallery-text: 0 0% 95%;&#10;    --gallery-muted: 0 0% 60%;&#10;    --glass-bg: 0 0% 100% / 0.1;&#10;    --glass-border: 0 0% 100% / 0.2;&#10;    --button-glass: 0 0% 100% / 0.15;&#10;    --button-glass-hover: 0 0% 100% / 0.25;&#10;&#10;    /* Shadows */&#10;    --shadow-soft: 0 4px 24px -4px hsl(0 0% 0% / 0.1);&#10;    --shadow-glass: 0 8px 32px -8px hsl(0 0% 0% / 0.3);&#10;    --shadow-intense: 0 20px 50px -12px hsl(0 0% 0% / 0.4);&#10;&#10;    /* Transitions */&#10;    --transition-smooth: all 0.3s cubic-bezier(0.23, 1, 0.320, 1);&#10;    --transition-spring: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);&#10;&#10;    --sidebar-background: 0 0% 98%;&#10;    --sidebar-foreground: 240 5.3% 26.1%;&#10;    --sidebar-primary: 240 5.9% 10%;&#10;    --sidebar-primary-foreground: 0 0% 98%;&#10;    --sidebar-accent: 240 4.8% 95.9%;&#10;    --sidebar-accent-foreground: 240 5.9% 10%;&#10;    --sidebar-border: 220 13% 91%;&#10;    --sidebar-ring: 217.2 91.2% 59.8%;&#10;}&#10;&#10;.dark {&#10;    --background: 222.2 84% 4.9%;&#10;    --foreground: 210 40% 98%;&#10;    --card: 222.2 84% 4.9%;&#10;    --card-foreground: 210 40% 98%;&#10;    --popover: 222.2 84% 4.9%;&#10;    --popover-foreground: 210 40% 98%;&#10;    --primary: 210 40% 98%;&#10;    --primary-foreground: 222.2 47.4% 11.2%;&#10;    --secondary: 217.2 32.6% 17.5%;&#10;    --secondary-foreground: 210 40% 98%;&#10;    --muted: 217.2 32.6% 17.5%;&#10;    --muted-foreground: 215 20.2% 65.1%;&#10;    --accent: 217.2 32.6% 17.5%;&#10;    --accent-foreground: 210 40% 98%;&#10;    --destructive: 0 62.8% 30.6%;&#10;    --destructive-foreground: 210 40% 98%;&#10;    --border: 217.2 32.6% 17.5%;&#10;    --input: 217.2 32.6% 17.5%;&#10;    --ring: 212.7 26.8% 83.9%;&#10;    --sidebar-background: 240 5.9% 10%;&#10;    --sidebar-foreground: 240 4.8% 95.9%;&#10;    --sidebar-primary: 224.3 76.3% 48%;&#10;    --sidebar-primary-foreground: 0 0% 100%;&#10;    --sidebar-accent: 240 3.7% 15.9%;&#10;    --sidebar-accent-foreground: 240 4.8% 95.9%;&#10;    --sidebar-border: 240 3.7% 15.9%;&#10;    --sidebar-ring: 217.2 91.2% 59.8%;&#10;}&#10;&#10;@layer base {&#10;    * {&#10;        @apply border-border outline-ring/50;&#10;    }&#10;&#10;    body {&#10;        @apply bg-background text-foreground;&#10;    }&#10;}&#10;&#10;/* Performance optimizations */&#10;@layer utilities {&#10;    .transform-gpu {&#10;        transform: translate3d(0, 0, 0);&#10;    }&#10;&#10;    .will-change-transform {&#10;        will-change: transform;&#10;    }&#10;&#10;    .will-change-opacity {&#10;        will-change: opacity;&#10;    }&#10;&#10;    .contain-layout {&#10;        contain: layout;&#10;    }&#10;&#10;    .contain-paint {&#10;        contain: paint;&#10;    }&#10;&#10;    .contain-style {&#10;        contain: style;&#10;    }&#10;&#10;    .contain-strict {&#10;        contain: strict;&#10;    }&#10;}&#10;&#10;/* Optimize animations for better performance */&#10;@layer components {&#10;    .animate-fade-in {&#10;        animation: fade-in 0.4s cubic-bezier(0.23, 1, 0.320, 1);&#10;    }&#10;&#10;    .animate-scale-in {&#10;        animation: scale-in 0.2s cubic-bezier(0.23, 1, 0.320, 1);&#10;    }&#10;&#10;    .animate-slide-in-right {&#10;        animation: slide-in-right 0.3s cubic-bezier(0.23, 1, 0.320, 1);&#10;    }&#10;}&#10;&#10;/* Touch device optimizations */&#10;@media (hover: none) and (pointer: coarse) {&#10;    .hover\:scale-105:hover {&#10;        transform: none;&#10;    }&#10;&#10;    .hover\:scale-\[1\.02\]:hover {&#10;        transform: none;&#10;    }&#10;&#10;    .group:hover .group-hover\:scale-105 {&#10;        transform: none;&#10;    }&#10;&#10;    .group:hover .group-hover\:scale-110 {&#10;        transform: none;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="@import &quot;tailwindcss&quot;;&#10;@import &quot;tw-animate-css&quot;;&#10;&#10;@plugin &quot;tailwindcss-motion&quot;;&#10;&#10;@custom-variant dark (&amp;:is(.dark *));&#10;&#10;@theme inline {&#10;    --color-background: var(--background);&#10;    --color-foreground: var(--foreground);&#10;    --color-sidebar-ring: var(--sidebar-ring);&#10;    --color-sidebar-border: var(--sidebar-border);&#10;    --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);&#10;    --color-sidebar-accent: var(--sidebar-accent);&#10;    --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);&#10;    --color-sidebar-primary: var(--sidebar-primary);&#10;    --color-sidebar-foreground: var(--sidebar-foreground);&#10;    --color-ring: var(--ring);&#10;    --color-input: var(--input);&#10;    --color-border: var(--border);&#10;    --color-destructive: var(--destructive);&#10;    --color-accent-foreground: var(--accent-foreground);&#10;    --color-accent: var(--accent);&#10;    --color-muted-foreground: var(--muted-foreground);&#10;    --color-muted: var(--muted);&#10;    --color-secondary-foreground: var(--secondary-foreground);&#10;    --color-secondary: var(--secondary);&#10;    --color-primary-foreground: var(--primary-foreground);&#10;    --color-primary: var(--primary);&#10;    --color-popover-foreground: var(--popover-foreground);&#10;    --color-popover: var(--popover);&#10;    --color-card-foreground: var(--card-foreground);&#10;    --color-card: var(--card);&#10;    --radius-sm: calc(var(--radius) - 4px);&#10;    --radius-md: calc(var(--radius) - 2px);&#10;    --radius-lg: var(--radius);&#10;    --radius-xl: calc(var(--radius) + 4px);&#10;&#10;    --color-gallery-bg: hsl(var(--gallery-bg));&#10;    --color-gallery-text: hsl(var(--gallery-text));&#10;    --color-gallery-muted: hsl(var(--gallery-muted));&#10;    --color-glass-bg: hsl(var(--glass-bg));&#10;    --color-glass-border: hsl(var(--glass-border));&#10;    --color-button-glass: hsl(var(--button-glass));&#10;    --color-button-glass-hover: hsl(var(--button-glass-hover));&#10;}&#10;&#10;/* Hide scrollbars for carousel */&#10;.scrollbar-hide {&#10;  -ms-overflow-style: none;  /* Internet Explorer 10+ */&#10;  scrollbar-width: none;  /* Firefox */&#10;}&#10;&#10;.scrollbar-hide::-webkit-scrollbar { &#10;  display: none;  /* Safari and Chrome */&#10;}&#10;&#10;/* Smooth scroll behavior for carousel */&#10;.snap-x {&#10;  scroll-snap-type: x mandatory;&#10;}&#10;&#10;.snap-center {&#10;  scroll-snap-align: center;&#10;}&#10;&#10;.snap-mandatory {&#10;  scroll-snap-type: x mandatory;&#10;}&#10;&#10;/* Ensure smooth scrolling */&#10;html {&#10;  scroll-behavior: smooth;&#10;}&#10;&#10;/* Custom scrollbar for indicators if needed */&#10;.custom-scrollbar::-webkit-scrollbar {&#10;  height: 4px;&#10;}&#10;&#10;.custom-scrollbar::-webkit-scrollbar-track {&#10;  background: rgba(255, 255, 255, 0.1);&#10;  border-radius: 2px;&#10;}&#10;&#10;.custom-scrollbar::-webkit-scrollbar-thumb {&#10;  background: rgba(255, 255, 255, 0.3);&#10;  border-radius: 2px;&#10;}&#10;&#10;.custom-scrollbar::-webkit-scrollbar-thumb:hover {&#10;  background: rgba(255, 255, 255, 0.5);&#10;}&#10;&#10;:root {&#10;    --radius: 0.625rem;&#10;    --background: 0 0% 100%;&#10;    --foreground: 222.2 84% 4.9%;&#10;&#10;    --card: 0 0% 100%;&#10;    --card-foreground: 222.2 84% 4.9%;&#10;&#10;    --popover: 0 0% 100%;&#10;    --popover-foreground: 222.2 84% 4.9%;&#10;&#10;    --primary: 222.2 47.4% 11.2%;&#10;    --primary-foreground: 210 40% 98%;&#10;&#10;    --secondary: 210 40% 96.1%;&#10;    --secondary-foreground: 222.2 47.4% 11.2%;&#10;&#10;    --muted: 210 40% 96.1%;&#10;    --muted-foreground: 215.4 16.3% 46.9%;&#10;&#10;    --accent: 210 40% 96.1%;&#10;    --accent-foreground: 222.2 47.4% 11.2%;&#10;&#10;    --destructive: 0 84.2% 60.2%;&#10;    --destructive-foreground: 210 40% 98%;&#10;&#10;    --border: 214.3 31.8% 91.4%;&#10;    --input: 214.3 31.8% 91.4%;&#10;    --ring: 222.2 84% 4.9%;&#10;&#10;    /* Gallery-specific design tokens */&#10;    --gallery-bg: 0 0% 5%;&#10;    --gallery-text: 0 0% 95%;&#10;    --gallery-muted: 0 0% 60%;&#10;    --glass-bg: 0 0% 100% / 0.1;&#10;    --glass-border: 0 0% 100% / 0.2;&#10;    --button-glass: 0 0% 100% / 0.15;&#10;    --button-glass-hover: 0 0% 100% / 0.25;&#10;&#10;    /* Shadows */&#10;    --shadow-soft: 0 4px 24px -4px hsl(0 0% 0% / 0.1);&#10;    --shadow-glass: 0 8px 32px -8px hsl(0 0% 0% / 0.3);&#10;    --shadow-intense: 0 20px 50px -12px hsl(0 0% 0% / 0.4);&#10;&#10;    /* Transitions */&#10;    --transition-smooth: all 0.3s cubic-bezier(0.23, 1, 0.320, 1);&#10;    --transition-spring: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);&#10;&#10;    --sidebar-background: 0 0% 98%;&#10;    --sidebar-foreground: 240 5.3% 26.1%;&#10;    --sidebar-primary: 240 5.9% 10%;&#10;    --sidebar-primary-foreground: 0 0% 98%;&#10;    --sidebar-accent: 240 4.8% 95.9%;&#10;    --sidebar-accent-foreground: 240 5.9% 10%;&#10;    --sidebar-border: 220 13% 91%;&#10;    --sidebar-ring: 217.2 91.2% 59.8%;&#10;}&#10;&#10;.dark {&#10;    --background: 222.2 84% 4.9%;&#10;    --foreground: 210 40% 98%;&#10;    --card: 222.2 84% 4.9%;&#10;    --card-foreground: 210 40% 98%;&#10;    --popover: 222.2 84% 4.9%;&#10;    --popover-foreground: 210 40% 98%;&#10;    --primary: 210 40% 98%;&#10;    --primary-foreground: 222.2 47.4% 11.2%;&#10;    --secondary: 217.2 32.6% 17.5%;&#10;    --secondary-foreground: 210 40% 98%;&#10;    --muted: 217.2 32.6% 17.5%;&#10;    --muted-foreground: 215 20.2% 65.1%;&#10;    --accent: 217.2 32.6% 17.5%;&#10;    --accent-foreground: 210 40% 98%;&#10;    --destructive: 0 62.8% 30.6%;&#10;    --destructive-foreground: 210 40% 98%;&#10;    --border: 217.2 32.6% 17.5%;&#10;    --input: 217.2 32.6% 17.5%;&#10;    --ring: 212.7 26.8% 83.9%;&#10;    --sidebar-background: 240 5.9% 10%;&#10;    --sidebar-foreground: 240 4.8% 95.9%;&#10;    --sidebar-primary: 224.3 76.3% 48%;&#10;    --sidebar-primary-foreground: 0 0% 100%;&#10;    --sidebar-accent: 240 3.7% 15.9%;&#10;    --sidebar-accent-foreground: 240 4.8% 95.9%;&#10;    --sidebar-border: 240 3.7% 15.9%;&#10;    --sidebar-ring: 217.2 91.2% 59.8%;&#10;}&#10;&#10;@layer base {&#10;    * {&#10;        @apply border-border outline-ring/50;&#10;    }&#10;&#10;    body {&#10;        @apply bg-background text-foreground;&#10;    }&#10;}&#10;&#10;/* Performance optimizations */&#10;@layer utilities {&#10;    .transform-gpu {&#10;        transform: translate3d(0, 0, 0);&#10;    }&#10;&#10;    .will-change-transform {&#10;        will-change: transform;&#10;    }&#10;&#10;    .will-change-opacity {&#10;        will-change: opacity;&#10;    }&#10;&#10;    .contain-layout {&#10;        contain: layout;&#10;    }&#10;&#10;    .contain-paint {&#10;        contain: paint;&#10;    }&#10;&#10;    .contain-style {&#10;        contain: style;&#10;    }&#10;&#10;    .contain-strict {&#10;        contain: strict;&#10;    }&#10;}&#10;&#10;/* Optimize animations for better performance */&#10;@layer components {&#10;    .animate-fade-in {&#10;        animation: fade-in 0.4s cubic-bezier(0.23, 1, 0.320, 1);&#10;    }&#10;&#10;    .animate-scale-in {&#10;        animation: scale-in 0.2s cubic-bezier(0.23, 1, 0.320, 1);&#10;    }&#10;&#10;    .animate-slide-in-right {&#10;        animation: slide-in-right 0.3s cubic-bezier(0.23, 1, 0.320, 1);&#10;    }&#10;}&#10;&#10;/* Touch device optimizations */&#10;@media (hover: none) and (pointer: coarse) {&#10;    .hover\:scale-105:hover {&#10;        transform: none;&#10;    }&#10;&#10;    .hover\:scale-\[1\.02\]:hover {&#10;        transform: none;&#10;    }&#10;&#10;    .group:hover .group-hover\:scale-105 {&#10;        transform: none;&#10;    }&#10;&#10;    .group:hover .group-hover\:scale-110 {&#10;        transform: none;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/gallery/ImageCarousel.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/gallery/ImageCarousel.tsx" />
              <option name="originalContent" value="import { useState, useRef } from &quot;react&quot;;&#10;import { galleryImages } from &quot;@/data/galleryData&quot;;&#10;import { CarouselTopBar } from &quot;./carousel/CarouselTopBar&quot;;&#10;import { CarouselNavigation } from &quot;./carousel/CarouselNavigation&quot;;&#10;import { CarouselImage } from &quot;./carousel/CarouselImage&quot;;&#10;import { ImageInfo } from &quot;./carousel/ImageInfo&quot;;&#10;import { ImageIndicators } from &quot;./carousel/ImageIndicators&quot;;&#10;import { useCarouselKeyboard } from &quot;./carousel/useCarouselKeyboard&quot;;&#10;import { useImageColor } from &quot;./carousel/useImageColor&quot;;&#10;&#10;interface ImageCarouselProps {&#10;  currentIndex: number;&#10;  onIndexChange: (index: number) =&gt; void;&#10;  onViewModeChange: () =&gt; void;&#10;}&#10;&#10;export function ImageCarousel({&#10;  currentIndex,&#10;  onIndexChange,&#10;  onViewModeChange,&#10;}: ImageCarouselProps) {&#10;  const [isLoading, setIsLoading] = useState(true);&#10;  const [isTransitioning, setIsTransitioning] = useState(false);&#10;  const imageRef = useRef&lt;HTMLImageElement | null&gt;(null);&#10;&#10;  const currentImage = galleryImages[currentIndex];&#10;  const { dominantColor, updateDominantColor } = useImageColor(&#10;    imageRef,&#10;    currentImage.id,&#10;    currentIndex,&#10;  );&#10;&#10;  const handleImageLoad = async () =&gt; {&#10;    setIsLoading(false);&#10;    setIsTransitioning(false);&#10;    await updateDominantColor();&#10;  };&#10;&#10;  const handlePrevious = () =&gt; {&#10;    const newIndex =&#10;      currentIndex === 0 ? galleryImages.length - 1 : currentIndex - 1;&#10;    onIndexChange(newIndex);&#10;    setIsLoading(true);&#10;    setIsTransitioning(true);&#10;  };&#10;  const [currentIndex, setCurrentIndex] = useState(initialIndex);&#10;  const handleNext = () =&gt; {&#10;    const newIndex =&#10;      currentIndex === galleryImages.length - 1 ? 0 : currentIndex + 1;&#10;    onIndexChange(newIndex);&#10;    setIsLoading(true);&#10;    setIsTransitioning(true);&#10;  };&#10;&#10;  const carouselRef = useRef&lt;HTMLDivElement&gt;(null);&#10;    onPrevious: handlePrevious,&#10;    onNext: handleNext,&#10;    onViewModeChange,&#10;    currentIndex,&#10;    onNext: () =&gt; goToNext(),&#10;  useEffect(() =&gt; {&#10;    if (carouselRef.current &amp;&amp; initialIndex &gt; 0) {&#10;    &lt;div&#10;      className=&quot;min-h-screen w-full transition-colors duration-500 ease-out relative overflow-hidden&quot;&#10;      style={{&#10;        backgroundColor: dominantColor,&#10;        contain: &quot;layout style paint&quot;,&#10;      }}&#10;    &gt;&#10;      {/* Background gradient overlay */}&#10;      &lt;div className=&quot;absolute inset-0 bg-gradient-to-b from-black/15 via-transparent to-black/30&quot; /&gt;&#10;&#10;    }&#10;  }, [initialIndex]);&#10;&#10;        onViewModeChange={onViewModeChange}&#10;&#10;&#10;      {/* Main image container */}&#10;      &lt;div className=&quot;flex items-center justify-center min-h-screen px-6 md:px-20&quot;&gt;&#10;        &lt;div className=&quot;relative max-w-5xl w-full&quot;&gt;&#10;          &lt;CarouselNavigation&#10;            onPrevious={handlePrevious}&#10;            onNext={handleNext}&#10;            isTransitioning={isTransitioning}&#10;          /&gt;&#10;  return (&#10;          &lt;CarouselImage&#10;            key={currentImage.id}&#10;            ref={imageRef}&#10;            src={currentImage.src}&#10;            alt={currentImage.title}&#10;            blurDataURL={currentImage.blurDataURL}&#10;            onLoad={handleImageLoad}&#10;            priority={true}&#10;          /&gt;&#10;&#10;          &lt;ImageInfo&#10;            title={currentImage.title}&#10;            description={currentImage.description}&#10;          /&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;                onLoad={() =&gt; handleImageLoad(image.id)}&#10;      &lt;ImageIndicators&#10;        totalImages={galleryImages.length}&#10;        currentIndex={currentIndex}&#10;        onIndexChange={onIndexChange}&#10;      /&gt;&#10;&#10;        &lt;ImageInfo&#10;          image={currentImage}&#10;          currentIndex={currentIndex}&#10;          totalImages={galleryImages.length}&#10;        /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useRef, useEffect } from &quot;react&quot;;&#10;import { CarouselImage } from &quot;./carousel/CarouselImage&quot;;&#10;import { CarouselNavigation } from &quot;./carousel/CarouselNavigation&quot;;&#10;import { CarouselTopBar } from &quot;./carousel/CarouselTopBar&quot;;&#10;import { ImageIndicators } from &quot;./carousel/ImageIndicators&quot;;&#10;import { ImageInfo } from &quot;./carousel/ImageInfo&quot;;&#10;import { galleryImages, type GalleryImage } from &quot;@/data/galleryData&quot;;&#10;import { useCarouselKeyboard } from &quot;./carousel/useCarouselKeyboard&quot;;&#10;&#10;interface ImageCarouselProps {&#10;  initialIndex?: number;&#10;  onClose?: () =&gt; void;&#10;}&#10;&#10;export function ImageCarousel({&#10;  initialIndex = 0,&#10;  onClose,&#10;}: ImageCarouselProps) {&#10;  const [currentIndex, setCurrentIndex] = useState(initialIndex);&#10;  const [imagesLoaded, setImagesLoaded] = useState&lt;Record&lt;string, boolean&gt;&gt;({});&#10;  const [isTransitioning, setIsTransitioning] = useState(false);&#10;  const carouselRef = useRef&lt;HTMLDivElement&gt;(null);&#10;  const scrollTimeoutRef = useRef&lt;NodeJS.Timeout | null&gt;(null);&#10;&#10;  // Handle keyboard navigation&#10;  useCarouselKeyboard({&#10;    onNext: () =&gt; goToNext(),&#10;    onPrevious: () =&gt; goToPrevious(),&#10;    onClose: onClose,&#10;  });&#10;&#10;  const goToNext = () =&gt; {&#10;    if (currentIndex &lt; galleryImages.length - 1) {&#10;      const newIndex = currentIndex + 1;&#10;      goToImage(newIndex);&#10;    }&#10;  };&#10;&#10;  const goToPrevious = () =&gt; {&#10;    if (currentIndex &gt; 0) {&#10;      const newIndex = currentIndex - 1;&#10;      goToImage(newIndex);&#10;    }&#10;  };&#10;&#10;  const goToImage = (index: number) =&gt; {&#10;    // Prevent multiple rapid clicks during transition&#10;    if (isTransitioning || index === currentIndex) return;&#10;&#10;    setIsTransitioning(true);&#10;    scrollToImage(index);&#10;&#10;    // Clear any existing timeout&#10;    if (scrollTimeoutRef.current) {&#10;      clearTimeout(scrollTimeoutRef.current);&#10;    }&#10;&#10;    // Monitor scroll completion and update state when animation finishes&#10;    const checkScrollCompletion = () =&gt; {&#10;      if (carouselRef.current) {&#10;        const scrollLeft = carouselRef.current.scrollLeft;&#10;        const imageWidth = carouselRef.current.clientWidth;&#10;        const targetScrollPosition = index * imageWidth;&#10;&#10;        // Check if we're close enough to the target position (within 5px)&#10;        if (Math.abs(scrollLeft - targetScrollPosition) &lt; 5) {&#10;          setCurrentIndex(index);&#10;          setIsTransitioning(false);&#10;        } else {&#10;          // Continue checking&#10;          scrollTimeoutRef.current = setTimeout(checkScrollCompletion, 50);&#10;        }&#10;      }&#10;    };&#10;&#10;    // Start checking after a short delay to let the smooth scroll begin&#10;    scrollTimeoutRef.current = setTimeout(checkScrollCompletion, 100);&#10;  };&#10;&#10;  const scrollToImage = (index: number) =&gt; {&#10;    if (carouselRef.current) {&#10;      const imageElement = carouselRef.current.children[index] as HTMLElement;&#10;      if (imageElement) {&#10;        imageElement.scrollIntoView({&#10;          behavior: &quot;smooth&quot;,&#10;          block: &quot;nearest&quot;,&#10;          inline: &quot;center&quot;,&#10;        });&#10;      }&#10;    }&#10;  };&#10;&#10;  const handleImageLoad = (imageId: string) =&gt; {&#10;    setImagesLoaded((prev) =&gt; ({ ...prev, [imageId]: true }));&#10;  };&#10;&#10;  // Handle scroll snap detection to update current index&#10;  useEffect(() =&gt; {&#10;    const carousel = carouselRef.current;&#10;    if (!carousel) return;&#10;&#10;    const handleScroll = () =&gt; {&#10;      // Don't update during manual transitions to avoid conflicts&#10;      if (isTransitioning) return;&#10;&#10;      const scrollLeft = carousel.scrollLeft;&#10;      const imageWidth = carousel.clientWidth;&#10;      const newIndex = Math.round(scrollLeft / imageWidth);&#10;&#10;      if (&#10;        newIndex !== currentIndex &amp;&amp;&#10;        newIndex &gt;= 0 &amp;&amp;&#10;        newIndex &lt; galleryImages.length&#10;      ) {&#10;        setCurrentIndex(newIndex);&#10;      }&#10;    };&#10;&#10;    carousel.addEventListener(&quot;scroll&quot;, handleScroll, { passive: true });&#10;    return () =&gt; carousel.removeEventListener(&quot;scroll&quot;, handleScroll);&#10;  }, [currentIndex, isTransitioning]);&#10;&#10;  // Cleanup timeout on unmount&#10;  useEffect(() =&gt; {&#10;    return () =&gt; {&#10;      if (scrollTimeoutRef.current) {&#10;        clearTimeout(scrollTimeoutRef.current);&#10;      }&#10;    };&#10;  }, []);&#10;&#10;  // Initialize scroll position&#10;  useEffect(() =&gt; {&#10;    if (carouselRef.current &amp;&amp; initialIndex &gt; 0) {&#10;      scrollToImage(initialIndex);&#10;    }&#10;  }, [initialIndex]);&#10;&#10;  const currentImage = galleryImages[currentIndex];&#10;&#10;  return (&#10;    &lt;div className=&quot;fixed inset-0 bg-black/90 backdrop-blur-sm z-50 flex flex-col&quot;&gt;&#10;      &lt;CarouselTopBar&#10;        currentIndex={currentIndex}&#10;        totalImages={galleryImages.length}&#10;        onClose={onClose}&#10;      /&gt;&#10;&#10;      &lt;div className=&quot;flex-1 relative overflow-hidden&quot;&gt;&#10;        {/* Main carousel container with scroll snap */}&#10;        &lt;div&#10;          ref={carouselRef}&#10;          className=&quot;flex h-full overflow-x-auto snap-x snap-mandatory scrollbar-hide&quot;&#10;          style={{&#10;            scrollbarWidth: &quot;none&quot;,&#10;            msOverflowStyle: &quot;none&quot;,&#10;          }}&#10;        &gt;&#10;          {galleryImages.map((image, index) =&gt; (&#10;            &lt;div&#10;              key={image.id}&#10;              className=&quot;flex-shrink-0 w-full h-full flex items-center justify-center snap-center px-4&quot;&#10;            &gt;&#10;              &lt;CarouselImage&#10;                src={image.src}&#10;                alt={image.title}&#10;                onLoad={() =&gt; handleImageLoad(image.id)}&#10;                priority={Math.abs(index - currentIndex) &lt;= 1}&#10;                blurDataURL={image.blurDataURL}&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;&#10;        {/* Navigation arrows */}&#10;        &lt;CarouselNavigation&#10;          onNext={goToNext}&#10;          onPrevious={goToPrevious}&#10;          canGoNext={currentIndex &lt; galleryImages.length - 1}&#10;          canGoPrevious={currentIndex &gt; 0}&#10;        /&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Bottom controls */}&#10;      &lt;div className=&quot;flex-shrink-0 p-6 space-y-4&quot;&gt;&#10;        &lt;ImageIndicators&#10;          images={galleryImages}&#10;          currentIndex={currentIndex}&#10;          onImageSelect={goToImage}&#10;        /&gt;&#10;&#10;        &lt;ImageInfo&#10;          image={currentImage}&#10;          currentIndex={currentIndex}&#10;          totalImages={galleryImages.length}&#10;        /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/gallery/carousel/CarouselImage.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/gallery/carousel/CarouselImage.tsx" />
              <option name="originalContent" value="import Image from &quot;next/image&quot;;&#10;import { useState } from &quot;react&quot;;&#10;&#10;interface CarouselImageProps {&#10;  src: string;&#10;  alt: string;&#10;  onLoad?: () =&gt; void;&#10;  priority?: boolean;&#10;  blurDataURL?: string;&#10;}&#10;&#10;export function CarouselImage({&#10;  src,&#10;  alt,&#10;  onLoad,&#10;  priority = false,&#10;  blurDataURL,&#10;}: CarouselImageProps) {&#10;  const [isLoaded, setIsLoaded] = useState(false);&#10;&#10;  const handleLoad = () =&gt; {&#10;    setIsLoaded(true);&#10;    onLoad?.();&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;relative w-full h-full flex items-center justify-center px-4 py-6&quot;&gt;&#10;      &lt;div className=&quot;relative max-w-full h-full flex items-center justify-center max-h-full&quot;&gt;&#10;        &lt;Image&#10;          src={src}&#10;          alt={alt}&#10;          width={1200}&#10;          height={800}&#10;          className={`max-w-full max-h-full w-full object-contain rounded-2xl transition-all shadow-2xl border-8 border-neutral-500/15 duration-500 ${&#10;            isLoaded ? &quot;opacity-100 scale-100&quot; : &quot;opacity-0 scale-95&quot;&#10;          }`}&#10;          onLoad={handleLoad}&#10;          priority={priority}&#10;          placeholder={blurDataURL ? &quot;blur&quot; : &quot;empty&quot;}&#10;          blurDataURL={blurDataURL}&#10;          sizes=&quot;(max-width: 768px) 100vw, (max-width: 1200px) 90vw, 80vw&quot;&#10;        /&gt;&#10;&#10;        {/* Loading state with blur image */}&#10;        {!isLoaded &amp;&amp; blurDataURL &amp;&amp; (&#10;          &lt;div className=&quot;absolute inset-0 rounded-2xl overflow-hidden&quot;&gt;&#10;            &lt;Image&#10;              src={blurDataURL}&#10;              alt=&quot;&quot;&#10;              fill&#10;              className=&quot;object-contain scale-110 blur-sm&quot;&#10;              priority&#10;            /&gt;&#10;            &lt;div className=&quot;absolute inset-0 bg-black/20 rounded-2xl flex items-center justify-center&quot;&gt;&#10;              &lt;div className=&quot;w-8 h-8 border-2 border-white/40 border-t-white rounded-full animate-spin&quot; /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Fallback loading for images without blur */}&#10;        {!isLoaded &amp;&amp; !blurDataURL &amp;&amp; (&#10;          &lt;div className=&quot;absolute inset-0 rounded-2xl bg-gray-900/30 backdrop-blur-sm flex items-center justify-center&quot;&gt;&#10;            &lt;div className=&quot;w-8 h-8 border-2 border-white/40 border-t-white rounded-full animate-spin&quot; /&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import Image from &quot;next/image&quot;;&#10;import { useState } from &quot;react&quot;;&#10;&#10;interface CarouselImageProps {&#10;  src: string;&#10;  alt: string;&#10;  onLoad?: () =&gt; void;&#10;  priority?: boolean;&#10;  blurDataURL?: string;&#10;}&#10;&#10;export function CarouselImage({&#10;  src,&#10;  alt,&#10;  onLoad,&#10;  priority = false,&#10;  blurDataURL,&#10;}: CarouselImageProps) {&#10;  const [isLoaded, setIsLoaded] = useState(false);&#10;&#10;  const handleLoad = () =&gt; {&#10;    setIsLoaded(true);&#10;    onLoad?.();&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;relative w-full h-full flex items-center justify-center px-4 py-6&quot;&gt;&#10;      &lt;div className=&quot;relative max-w-full h-full flex items-center justify-center max-h-full&quot;&gt;&#10;        &lt;Image&#10;          src={src}&#10;          alt={alt}&#10;          width={1200}&#10;          height={800}&#10;          className={`max-w-full max-h-full w-full object-contain rounded-2xl transition-all shadow-2xl border-8 border-neutral-500/15 duration-500 ${&#10;            isLoaded ? &quot;opacity-100 scale-100&quot; : &quot;opacity-0 scale-95&quot;&#10;          }`}&#10;          onLoad={handleLoad}&#10;          priority={priority}&#10;          placeholder={blurDataURL ? &quot;blur&quot; : &quot;empty&quot;}&#10;          blurDataURL={blurDataURL}&#10;          sizes=&quot;(max-width: 768px) 100vw, (max-width: 1200px) 90vw, 80vw&quot;&#10;        /&gt;&#10;&#10;        {/* Loading state with blur image */}&#10;        {!isLoaded &amp;&amp; blurDataURL &amp;&amp; (&#10;          &lt;div className=&quot;absolute inset-0 rounded-2xl overflow-hidden&quot;&gt;&#10;            &lt;Image&#10;              src={blurDataURL}&#10;              alt=&quot;&quot;&#10;              fill&#10;              className=&quot;max-w-full max-h-full w-full object-contain rounded-2xl shadow-2xl border-8 border-neutral-500/15 blur-sm&quot;&#10;              priority&#10;            /&gt;&#10;            &lt;div className=&quot;absolute inset-0 bg-black/20 rounded-2xl flex items-center justify-center&quot;&gt;&#10;              &lt;div className=&quot;w-8 h-8 border-2 border-white/40 border-t-white rounded-full animate-spin&quot; /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Fallback loading for images without blur */}&#10;        {!isLoaded &amp;&amp; !blurDataURL &amp;&amp; (&#10;          &lt;div className=&quot;absolute inset-0 rounded-2xl bg-gray-900/30 backdrop-blur-sm flex items-center justify-center&quot;&gt;&#10;            &lt;div className=&quot;w-8 h-8 border-2 border-white/40 border-t-white rounded-full animate-spin&quot; /&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/gallery/carousel/CarouselNavigation.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/gallery/carousel/CarouselNavigation.tsx" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="import { ChevronLeft, ChevronRight } from &quot;lucide-react&quot;;&#10;&#10;interface CarouselNavigationProps {&#10;  onNext: () =&gt; void;&#10;  onPrevious: () =&gt; void;&#10;  canGoNext: boolean;&#10;  canGoPrevious: boolean;&#10;}&#10;&#10;export function CarouselNavigation({&#10;  onNext,&#10;  onPrevious,&#10;  canGoNext,&#10;  canGoPrevious,&#10;}: CarouselNavigationProps) {&#10;  return (&#10;    &lt;&gt;&#10;      {/* Previous button */}&#10;      &lt;button&#10;        onClick={onPrevious}&#10;        disabled={!canGoPrevious}&#10;        className={`absolute left-6 top-1/2 -translate-y-1/2 z-10 p-4 rounded-full bg-black/30 backdrop-blur-xl border border-white/15 transition-all duration-300 ease-out shadow-lg ${&#10;          canGoPrevious&#10;            ? &quot;hover:bg-black/50 hover:scale-105 hover:shadow-xl active:scale-95 opacity-100&quot;&#10;            : &quot;opacity-40 cursor-not-allowed&quot;&#10;        }`}&#10;        aria-label=&quot;Previous image&quot;&#10;      &gt;&#10;        &lt;ChevronLeft className=&quot;w-6 h-6 text-white&quot; strokeWidth={2.5} /&gt;&#10;      &lt;/button&gt;&#10;&#10;      {/* Next button */}&#10;      &lt;button&#10;        onClick={onNext}&#10;        disabled={!canGoNext}&#10;        className={`absolute right-6 top-1/2 -translate-y-1/2 z-10 p-4 rounded-full bg-black/30 backdrop-blur-xl border border-white/15 transition-all duration-300 ease-out shadow-lg ${&#10;          canGoNext&#10;            ? &quot;hover:bg-black/50 hover:scale-105 hover:shadow-xl active:scale-95 opacity-100&quot;&#10;            : &quot;opacity-40 cursor-not-allowed&quot;&#10;        }`}&#10;        aria-label=&quot;Next image&quot;&#10;      &gt;&#10;        &lt;ChevronRight className=&quot;w-6 h-6 text-white&quot; strokeWidth={2.5} /&gt;&#10;      &lt;/button&gt;&#10;    &lt;/&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/gallery/carousel/ImageInfo.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/gallery/carousel/ImageInfo.tsx" />
              <option name="originalContent" value="import { Share2 } from &quot;lucide-react&quot;;&#10;import { GlassButton } from &quot;@/components/ui/glass-button&quot;;&#10;import { toast } from &quot;sonner&quot;;&#10;&#10;interface ImageInfoProps {&#10;  title: string;&#10;  description: string;&#10;}&#10;&#10;export function ImageInfo({ title, description }: ImageInfoProps) {&#10;  const handleShare = async () =&gt; {&#10;    try {&#10;      if (navigator.share) {&#10;        await navigator.share({&#10;          title,&#10;          text: description,&#10;          url: window.location.href,&#10;        });&#10;      } else {&#10;        await navigator.clipboard.writeText(window.location.href);&#10;        toast.success(&quot;Link copied to clipboard!&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error sharing:&quot;, error);&#10;      toast.error(&quot;Failed to share image&quot;);&#10;    }&#10;  };&#10;&#10;  image,&#10;    &lt;div className=&quot;mt-8 text-center space-y-4&quot;&gt;&#10;      &lt;div className=&quot;space-y-2&quot;&gt;&#10;        &lt;h2 className=&quot;text-xl  font-bold text-gallery-text&quot;&gt;{title}&lt;/h2&gt;&#10;        &lt;p className=&quot;text-gallery-muted text-base max-w-2xl mx-auto&quot;&gt;&#10;          {description}&#10;        &lt;/p&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;flex items-center justify-center gap-4 pt-4&quot;&gt;&#10;        &lt;GlassButton&#10;          onClick={handleShare}&#10;          className=&quot;hover:scale-105 transition-transform duration-200&quot;&#10;        &gt;&#10;          &lt;Share2 size={18} className=&quot;mr-2&quot; /&gt;&#10;          Share&#10;        &lt;/GlassButton&gt;&#10;      &lt;/div&gt;&#10;      &lt;h3 className=&quot;font-medium text-lg mb-1&quot;&gt;{image.alt}&lt;/h3&gt;&#10;      &lt;p className=&quot;text-sm text-white/60&quot;&gt;&#10;        Image {currentIndex + 1} of {totalImages}&#10;      &lt;/p&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import { type GalleryImage } from &quot;@/data/galleryData&quot;;&#10;&#10;interface ImageInfoProps {&#10;  image: GalleryImage;&#10;  currentIndex: number;&#10;  totalImages: number;&#10;}&#10;&#10;export function ImageInfo({&#10;  image,&#10;  currentIndex,&#10;  totalImages,&#10;}: ImageInfoProps) {&#10;  return (&#10;    &lt;div className=&quot;text-center text-white px-6 max-w-2xl mx-auto&quot;&gt;&#10;      &lt;h3 className=&quot;font-semibold text-xl mb-2 text-white/95 tracking-tight leading-tight&quot;&gt;&#10;        {image.title}&#10;      &lt;/h3&gt;&#10;      &lt;p className=&quot;text-sm text-white/70 leading-relaxed mb-3 font-medium&quot;&gt;&#10;        {image.description}&#10;      &lt;/p&gt;&#10;      &lt;p className=&quot;text-xs text-white/50 font-medium tracking-wide&quot;&gt;&#10;        {currentIndex + 1} of {totalImages}&#10;      &lt;/p&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/gallery/carousel/useCarouselKeyboard.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/gallery/carousel/useCarouselKeyboard.ts" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="import { useEffect } from &quot;react&quot;;&#10;&#10;interface UseCarouselKeyboardProps {&#10;  onNext: () =&gt; void;&#10;  onPrevious: () =&gt; void;&#10;  onClose?: () =&gt; void;&#10;}&#10;&#10;export function useCarouselKeyboard({&#10;  onNext,&#10;  onPrevious,&#10;  onClose,&#10;}: UseCarouselKeyboardProps) {&#10;  useEffect(() =&gt; {&#10;    const handleKeyDown = (event: KeyboardEvent) =&gt; {&#10;      switch (event.key) {&#10;        case &quot;ArrowRight&quot;:&#10;        case &quot; &quot;: // Spacebar&#10;          event.preventDefault();&#10;          onNext();&#10;          break;&#10;        case &quot;ArrowLeft&quot;:&#10;          event.preventDefault();&#10;          onPrevious();&#10;          break;&#10;        case &quot;Escape&quot;:&#10;          event.preventDefault();&#10;          onClose?.();&#10;          break;&#10;        default:&#10;          break;&#10;      }&#10;    };&#10;&#10;    window.addEventListener(&quot;keydown&quot;, handleKeyDown);&#10;    return () =&gt; window.removeEventListener(&quot;keydown&quot;, handleKeyDown);&#10;  }, [onNext, onPrevious, onClose]);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>