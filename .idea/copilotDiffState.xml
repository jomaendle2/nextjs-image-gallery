<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/components/gallery/ImageCarousel.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/gallery/ImageCarousel.tsx" />
              <option name="originalContent" value="import { useState, useRef } from &quot;react&quot;;&#10;import { galleryImages } from &quot;@/data/galleryData&quot;;&#10;import { CarouselTopBar } from &quot;./carousel/CarouselTopBar&quot;;&#10;import { CarouselNavigation } from &quot;./carousel/CarouselNavigation&quot;;&#10;import { CarouselImage } from &quot;./carousel/CarouselImage&quot;;&#10;import { ImageInfo } from &quot;./carousel/ImageInfo&quot;;&#10;import { ImageIndicators } from &quot;./carousel/ImageIndicators&quot;;&#10;import { useCarouselKeyboard } from &quot;./carousel/useCarouselKeyboard&quot;;&#10;import { useImageColor } from &quot;./carousel/useImageColor&quot;;&#10;&#10;interface ImageCarouselProps {&#10;  currentIndex: number;&#10;  onIndexChange: (index: number) =&gt; void;&#10;  onViewModeChange: () =&gt; void;&#10;}&#10;&#10;export function ImageCarousel({&#10;  currentIndex,&#10;  onIndexChange,&#10;  onViewModeChange,&#10;}: ImageCarouselProps) {&#10;  const [isLoading, setIsLoading] = useState(true);&#10;  const [isTransitioning, setIsTransitioning] = useState(false);&#10;  const imageRef = useRef&lt;HTMLImageElement&gt;(null);&#10;&#10;  const currentImage = galleryImages[currentIndex];&#10;  const { dominantColor, updateDominantColor } = useImageColor(&#10;    imageRef,&#10;    currentImage.id,&#10;    currentIndex,&#10;  );&#10;&#10;  const handleImageLoad = async () =&gt; {&#10;    setIsLoading(false);&#10;    setIsTransitioning(false);&#10;    await updateDominantColor();&#10;  };&#10;&#10;  const handlePrevious = () =&gt; {&#10;    setIsTransitioning(true);&#10;    onIndexChange(&#10;      currentIndex === 0 ? galleryImages.length - 1 : currentIndex - 1,&#10;    );&#10;  };&#10;&#10;  const handleNext = () =&gt; {&#10;    setIsTransitioning(true);&#10;    onIndexChange(&#10;      currentIndex === galleryImages.length - 1 ? 0 : currentIndex + 1,&#10;    );&#10;  };&#10;&#10;  useCarouselKeyboard({&#10;    onPrevious: handlePrevious,&#10;    onNext: handleNext,&#10;    onViewModeChange,&#10;    currentIndex,&#10;  });&#10;&#10;  return (&#10;    &lt;div&#10;      className=&quot;min-h-screen w-full transition-colors duration-500 ease-out relative overflow-hidden&quot;&#10;      style={{&#10;        backgroundColor: dominantColor,&#10;        contain: &quot;layout style paint&quot;,&#10;      }}&#10;    &gt;&#10;      {/* Background gradient overlay */}&#10;      &lt;div className=&quot;absolute inset-0 bg-gradient-to-b from-black/15 via-transparent to-black/30&quot; /&gt;&#10;&#10;      &lt;CarouselTopBar&#10;        currentIndex={currentIndex}&#10;        totalImages={galleryImages.length}&#10;        onViewModeChange={onViewModeChange}&#10;      /&gt;&#10;&#10;      {/* Main image container */}&#10;      &lt;div className=&quot;flex items-center justify-center min-h-screen px-6 md:px-20&quot;&gt;&#10;        &lt;div className=&quot;relative max-w-5xl w-full&quot;&gt;&#10;          &lt;CarouselNavigation&#10;            onPrevious={handlePrevious}&#10;            onNext={handleNext}&#10;            isTransitioning={isTransitioning}&#10;          /&gt;&#10;&#10;          &lt;CarouselImage&#10;            ref={imageRef}&#10;            src={currentImage.src}&#10;            alt={currentImage.title}&#10;            title={currentImage.title}&#10;            isLoading={isLoading}&#10;            onLoad={handleImageLoad}&#10;          /&gt;&#10;&#10;          &lt;ImageInfo&#10;            title={currentImage.title}&#10;            description={currentImage.description}&#10;          /&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;ImageIndicators&#10;        totalImages={galleryImages.length}&#10;        currentIndex={currentIndex}&#10;        onIndexChange={onIndexChange}&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import { useState, useRef } from &quot;react&quot;;&#10;import { galleryImages } from &quot;@/data/galleryData&quot;;&#10;import { CarouselTopBar } from &quot;./carousel/CarouselTopBar&quot;;&#10;import { CarouselNavigation } from &quot;./carousel/CarouselNavigation&quot;;&#10;import { CarouselImage } from &quot;./carousel/CarouselImage&quot;;&#10;import { ImageInfo } from &quot;./carousel/ImageInfo&quot;;&#10;import { ImageIndicators } from &quot;./carousel/ImageIndicators&quot;;&#10;import { useCarouselKeyboard } from &quot;./carousel/useCarouselKeyboard&quot;;&#10;import { useImageColor } from &quot;./carousel/useImageColor&quot;;&#10;&#10;interface ImageCarouselProps {&#10;  currentIndex: number;&#10;  onIndexChange: (index: number) =&gt; void;&#10;  onViewModeChange: () =&gt; void;&#10;}&#10;&#10;export function ImageCarousel({&#10;  currentIndex,&#10;  onIndexChange,&#10;  onViewModeChange,&#10;}: ImageCarouselProps) {&#10;  const [isLoading, setIsLoading] = useState(true);&#10;  const [isTransitioning, setIsTransitioning] = useState(false);&#10;  const imageRef = useRef&lt;HTMLImageElement | null&gt;(null);&#10;&#10;  const currentImage = galleryImages[currentIndex];&#10;  const { dominantColor, updateDominantColor } = useImageColor(&#10;    imageRef,&#10;    currentImage.id,&#10;    currentIndex,&#10;  );&#10;&#10;  const handleImageLoad = async () =&gt; {&#10;    setIsLoading(false);&#10;    setIsTransitioning(false);&#10;    await updateDominantColor();&#10;  };&#10;&#10;  const handlePrevious = () =&gt; {&#10;    setIsTransitioning(true);&#10;    onIndexChange(&#10;      currentIndex === 0 ? galleryImages.length - 1 : currentIndex - 1,&#10;    );&#10;  };&#10;&#10;  const handleNext = () =&gt; {&#10;    setIsTransitioning(true);&#10;    onIndexChange(&#10;      currentIndex === galleryImages.length - 1 ? 0 : currentIndex + 1,&#10;    );&#10;  };&#10;&#10;  useCarouselKeyboard({&#10;    onPrevious: handlePrevious,&#10;    onNext: handleNext,&#10;    onViewModeChange,&#10;    currentIndex,&#10;  });&#10;&#10;  return (&#10;    &lt;div&#10;      className=&quot;min-h-screen w-full transition-colors duration-500 ease-out relative overflow-hidden&quot;&#10;      style={{&#10;        backgroundColor: dominantColor,&#10;        contain: &quot;layout style paint&quot;,&#10;      }}&#10;    &gt;&#10;      {/* Background gradient overlay */}&#10;      &lt;div className=&quot;absolute inset-0 bg-gradient-to-b from-black/15 via-transparent to-black/30&quot; /&gt;&#10;&#10;      &lt;CarouselTopBar&#10;        currentIndex={currentIndex}&#10;        totalImages={galleryImages.length}&#10;        onViewModeChange={onViewModeChange}&#10;      /&gt;&#10;&#10;      {/* Main image container */}&#10;      &lt;div className=&quot;flex items-center justify-center min-h-screen px-6 md:px-20&quot;&gt;&#10;        &lt;div className=&quot;relative max-w-5xl w-full&quot;&gt;&#10;          &lt;CarouselNavigation&#10;            onPrevious={handlePrevious}&#10;            onNext={handleNext}&#10;            isTransitioning={isTransitioning}&#10;          /&gt;&#10;&#10;          &lt;CarouselImage&#10;            ref={imageRef}&#10;            src={currentImage.src}&#10;            alt={currentImage.title}&#10;            isLoading={isLoading}&#10;            onLoad={handleImageLoad}&#10;          /&gt;&#10;&#10;          &lt;ImageInfo&#10;            title={currentImage.title}&#10;            description={currentImage.description}&#10;          /&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;ImageIndicators&#10;        totalImages={galleryImages.length}&#10;        currentIndex={currentIndex}&#10;        onIndexChange={onIndexChange}&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/gallery/carousel/CarouselImage.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/gallery/carousel/CarouselImage.tsx" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="import { forwardRef } from &quot;react&quot;;&#10;import Image from &quot;next/image&quot;;&#10;&#10;interface CarouselImageProps {&#10;  src: string;&#10;  alt: string;&#10;  isLoading: boolean;&#10;  onLoad: () =&gt; void;&#10;}&#10;&#10;export const CarouselImage = forwardRef&lt;HTMLImageElement, CarouselImageProps&gt;(&#10;  ({ src, alt, isLoading, onLoad }, ref) =&gt; {&#10;    return (&#10;      &lt;div className=&quot;relative rounded-3xl overflow-hidden shadow-intense bg-black/15 transform-gpu&quot;&gt;&#10;        {isLoading &amp;&amp; (&#10;          &lt;div className=&quot;absolute inset-0 flex items-center justify-center bg-black/20 rounded-3xl&quot;&gt;&#10;            &lt;div className=&quot;animate-spin rounded-full h-8 w-8 border-b-2 border-gallery-text&quot;&gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        &lt;Image&#10;          ref={ref}&#10;          width={800}&#10;          height={600}&#10;          src={src}&#10;          alt={alt}&#10;          className={`w-full h-auto max-h-[70vh] object-contain transition-opacity duration-300 transform-gpu ${&#10;            isLoading ? &quot;opacity-0&quot; : &quot;opacity-100&quot;&#10;          }`}&#10;          onLoad={onLoad}&#10;          style={{ willChange: &quot;opacity&quot; }}&#10;        /&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;);&#10;&#10;CarouselImage.displayName = &quot;CarouselImage&quot;;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/gallery/carousel/CarouselNavigation.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/gallery/carousel/CarouselNavigation.tsx" />
              <option name="updatedContent" value="import { ChevronLeft, ChevronRight } from &quot;lucide-react&quot;;&#10;import { GlassButton } from &quot;@/components/ui/glass-button&quot;;&#10;&#10;interface CarouselNavigationProps {&#10;  onPrevious: () =&gt; void;&#10;  onNext: () =&gt; void;&#10;  isTransitioning: boolean;&#10;}&#10;&#10;export function CarouselNavigation({&#10;  onPrevious,&#10;  onNext,&#10;  isTransitioning,&#10;}: CarouselNavigationProps) {&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;absolute left-4 top-1/2 -translate-y-1/2 z-10&quot;&gt;&#10;        &lt;GlassButton&#10;          variant=&quot;icon&quot;&#10;          onClick={onPrevious}&#10;          className=&quot;hover:scale-105 transition-transform duration-200&quot;&#10;          disabled={isTransitioning}&#10;        &gt;&#10;          &lt;ChevronLeft size={24} /&gt;&#10;        &lt;/GlassButton&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;absolute right-4 top-1/2 -translate-y-1/2 z-10&quot;&gt;&#10;        &lt;GlassButton&#10;          variant=&quot;icon&quot;&#10;          onClick={onNext}&#10;          className=&quot;hover:scale-105 transition-transform duration-200&quot;&#10;          disabled={isTransitioning}&#10;        &gt;&#10;          &lt;ChevronRight size={24} /&gt;&#10;        &lt;/GlassButton&gt;&#10;      &lt;/div&gt;&#10;    &lt;/&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/gallery/carousel/CarouselTopBar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/gallery/carousel/CarouselTopBar.tsx" />
              <option name="updatedContent" value="import { Grid3x3 } from &quot;lucide-react&quot;;&#10;import { GlassButton } from &quot;@/components/ui/glass-button&quot;;&#10;&#10;interface CarouselTopBarProps {&#10;  currentIndex: number;&#10;  totalImages: number;&#10;  onViewModeChange: () =&gt; void;&#10;}&#10;&#10;export function CarouselTopBar({&#10;  currentIndex,&#10;  totalImages,&#10;  onViewModeChange,&#10;}: CarouselTopBarProps) {&#10;  return (&#10;    &lt;div className=&quot;absolute top-6 left-6 right-6 z-20 flex justify-between items-center&quot;&gt;&#10;      &lt;div className=&quot;text-gallery-text/80 text-sm font-medium&quot;&gt;&#10;        {currentIndex + 1} of {totalImages}&#10;      &lt;/div&gt;&#10;      &lt;GlassButton&#10;        variant=&quot;icon&quot;&#10;        onClick={onViewModeChange}&#10;        className=&quot;hover:scale-105 transition-transform duration-200&quot;&#10;      &gt;&#10;        &lt;Grid3x3 size={20} /&gt;&#10;      &lt;/GlassButton&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/gallery/carousel/ImageIndicators.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/gallery/carousel/ImageIndicators.tsx" />
              <option name="updatedContent" value="interface ImageIndicatorsProps {&#10;  totalImages: number;&#10;  currentIndex: number;&#10;  onIndexChange: (index: number) =&gt; void;&#10;}&#10;&#10;export function ImageIndicators({&#10;  totalImages,&#10;  currentIndex,&#10;  onIndexChange,&#10;}: ImageIndicatorsProps) {&#10;  return (&#10;    &lt;div className=&quot;absolute bottom-8 left-1/2 -translate-x-1/2 flex gap-2&quot;&gt;&#10;      {Array.from({ length: totalImages }, (_, index) =&gt; (&#10;        &lt;button&#10;          key={index}&#10;          onClick={() =&gt; onIndexChange(index)}&#10;          className={`w-2 h-2 rounded-full transition-all duration-200 hover:scale-125 transform-gpu ${&#10;            index === currentIndex&#10;              ? &quot;bg-gallery-text scale-125&quot;&#10;              : &quot;bg-gallery-text/40 hover:bg-gallery-text/60&quot;&#10;          }`}&#10;          style={{ willChange: &quot;transform&quot; }}&#10;        /&gt;&#10;      ))}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/gallery/carousel/ImageInfo.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/gallery/carousel/ImageInfo.tsx" />
              <option name="updatedContent" value="import { Share2 } from &quot;lucide-react&quot;;&#10;import { GlassButton } from &quot;@/components/ui/glass-button&quot;;&#10;import { toast } from &quot;sonner&quot;;&#10;&#10;interface ImageInfoProps {&#10;  title: string;&#10;  description: string;&#10;}&#10;&#10;export function ImageInfo({ title, description }: ImageInfoProps) {&#10;  const handleShare = async () =&gt; {&#10;    try {&#10;      if (navigator.share) {&#10;        await navigator.share({&#10;          title,&#10;          text: description,&#10;          url: window.location.href,&#10;        });&#10;      } else {&#10;        await navigator.clipboard.writeText(window.location.href);&#10;        toast.success(&quot;Link copied to clipboard!&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error sharing:&quot;, error);&#10;      toast.error(&quot;Failed to share image&quot;);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;mt-8 text-center space-y-4&quot;&gt;&#10;      &lt;div className=&quot;space-y-2&quot;&gt;&#10;        &lt;h2 className=&quot;text-2xl md:text-3xl font-bold text-gallery-text&quot;&gt;&#10;          {title}&#10;        &lt;/h2&gt;&#10;        &lt;p className=&quot;text-gallery-muted text-lg max-w-2xl mx-auto&quot;&gt;&#10;          {description}&#10;        &lt;/p&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;flex items-center justify-center gap-4 pt-4&quot;&gt;&#10;        &lt;GlassButton&#10;          onClick={handleShare}&#10;          className=&quot;hover:scale-105 transition-transform duration-200&quot;&#10;        &gt;&#10;          &lt;Share2 size={18} className=&quot;mr-2&quot; /&gt;&#10;          Share&#10;        &lt;/GlassButton&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/gallery/carousel/useCarouselKeyboard.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/gallery/carousel/useCarouselKeyboard.ts" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="import { useEffect } from &quot;react&quot;;&#10;&#10;interface UseCarouselKeyboardProps {&#10;  onPrevious: () =&gt; void;&#10;  onNext: () =&gt; void;&#10;  onViewModeChange: () =&gt; void;&#10;  currentIndex: number;&#10;}&#10;&#10;export function useCarouselKeyboard({&#10;  onPrevious,&#10;  onNext,&#10;  onViewModeChange,&#10;  currentIndex,&#10;}: UseCarouselKeyboardProps) {&#10;  useEffect(() =&gt; {&#10;    const handleKeyDown = (e: KeyboardEvent) =&gt; {&#10;      if (e.key === &quot;ArrowLeft&quot;) {&#10;        onPrevious();&#10;      }&#10;      if (e.key === &quot;ArrowRight&quot;) {&#10;        onNext();&#10;      }&#10;      if (e.key === &quot;Escape&quot;) {&#10;        onViewModeChange();&#10;      }&#10;    };&#10;&#10;    document.addEventListener(&quot;keydown&quot;, handleKeyDown);&#10;    return () =&gt; document.removeEventListener(&quot;keydown&quot;, handleKeyDown);&#10;  }, [currentIndex, onPrevious, onNext, onViewModeChange]);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/gallery/carousel/useImageColor.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/gallery/carousel/useImageColor.ts" />
              <option name="originalContent" value="import { useState, useEffect, useCallback } from &quot;react&quot;;&#10;import { extractDominantColorDebounced } from &quot;@/utils/colorExtractor&quot;;&#10;&#10;export function useImageColor(&#10;  imageRef: React.RefObject&lt;HTMLImageElement&gt;,&#10;  imageId: string,&#10;  currentIndex: number,&#10;) {&#10;  const [dominantColor, setDominantColor] = useState(&quot;hsl(220, 20%, 15%)&quot;);&#10;&#10;  const updateDominantColor = useCallback(async () =&gt; {&#10;    if (imageRef.current &amp;&amp; imageRef.current.complete) {&#10;      try {&#10;        const color = await extractDominantColorDebounced(&#10;          imageRef.current,&#10;          imageId,&#10;        );&#10;        setDominantColor(color);&#10;      } catch (error) {&#10;        console.error(&quot;Error extracting color:&quot;, error);&#10;      }&#10;    }&#10;  }, [imageRef, imageId]);&#10;&#10;  useEffect(() =&gt; {&#10;    void updateDominantColor();&#10;  }, [currentIndex, imageId, updateDominantColor]);&#10;&#10;  return { dominantColor, updateDominantColor };&#10;}&#10;" />
              <option name="updatedContent" value="import { useState, useEffect } from &quot;react&quot;;&#10;import { extractDominantColorDebounced } from &quot;@/utils/colorExtractor&quot;;&#10;&#10;export function useImageColor(&#10;  imageRef: React.RefObject&lt;HTMLImageElement | null&gt;,&#10;  imageId: string,&#10;  currentIndex: number&#10;) {&#10;  const [dominantColor, setDominantColor] = useState(&quot;hsl(220, 20%, 15%)&quot;);&#10;&#10;  const updateDominantColor = async () =&gt; {&#10;    if (imageRef.current &amp;&amp; imageRef.current.complete) {&#10;      try {&#10;        const color = await extractDominantColorDebounced(&#10;          imageRef.current,&#10;          imageId&#10;        );&#10;        setDominantColor(color);&#10;      } catch (error) {&#10;        console.error(&quot;Error extracting color:&quot;, error);&#10;      }&#10;    }&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    updateDominantColor();&#10;  }, [currentIndex, imageId]);&#10;&#10;  return { dominantColor, updateDominantColor };&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>